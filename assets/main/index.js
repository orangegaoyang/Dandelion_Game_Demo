System.register("bundle://main/_virtual/AudioHelper.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(o){var e,n,t,r,i,s,u,c;return{setters:[function(o){e=o.inheritsLoose},function(o){n=o.cclegacy,t=o._decorator,r=o.director,i=o.AudioSource,s=o.resources,u=o.AudioClip,c=o.Component}],execute:function(){var l,a;n._RF.push({},"2585c4z1GBJD67FFVHpfHq5","AudioHelper",void 0);var d=t.ccclass;t.property,o("AudioHelper",d("AudioHelper")(((a=function(o){function n(){for(var e,n=arguments.length,t=new Array(n),r=0;r<n;r++)t[r]=arguments[r];return(e=o.call.apply(o,[this].concat(t))||this)._bgm=void 0,e._sfx=void 0,e}e(n,o);var t=n.prototype;return t.onLoad=function(){n.instance=this,r.addPersistRootNode(this.node),this._bgm=this.node.addComponent(i),this._bgm.volume=.5,this._sfx=this.node.addComponent(i),this._sfx.volume=1},t.playBGM=function(){var o=this;s.load("Sounds/bgm",u,(function(e,n){if(e)return console.error(e);o._bgm.clip=n,o._bgm.loop=!0,o._bgm.play()}))},t.playSFX=function(o){var e=this;s.load("Sounds/"+o,u,(function(o,n){if(o)return console.error(o);e._sfx.playOneShot(n)}))},n}(c)).instance=void 0,l=a))||l);n._RF.pop()}}}));

System.register("bundle://main/_virtual/CompassAnimation.ts",["./rollupPluginModLoBabelHelpers.js","cc","./AudioHelper.ts","./IdleAnimations.ts","./EffectsHelper.ts"],(function(n){var t,e,i,r,o,a,s,c,l,u,p,f,m,d,y;return{setters:[function(n){t=n.applyDecoratedDescriptor,e=n.inheritsLoose,i=n.initializerDefineProperty,r=n.assertThisInitialized,o=n.asyncToGenerator,a=n.regeneratorRuntime},function(n){s=n.cclegacy,c=n._decorator,l=n.Node,u=n.ParticleSystem2D,p=n.tween,f=n.Component},function(n){m=n.AudioHelper},function(n){d=n.IdelAnimations},function(n){y=n.EffectsHelper}],execute:function(){var g,v,b,h,w,A,S;s._RF.push({},"c1543ts8bNFvbOQsJSx0vum","CompassAnimation",void 0);var E=c.ccclass,C=c.property;n("CompassAnimation",(g=E("CompassAnimation"),v=C(l),b=C(l),g((A=t((w=function(n){function t(){for(var t,e=arguments.length,o=new Array(e),a=0;a<e;a++)o[a]=arguments[a];return t=n.call.apply(n,[this].concat(o))||this,i(t,"pointer",A,r(t)),i(t,"windEffect",S,r(t)),t.angleMap={N:0,NE:315,E:270,SE:225,S:180,SW:135,W:90,NW:45},t.rotationOffset=0,t}e(t,n);var s=t.prototype;return s.blow=function(n){var t,e=this.windEffect.getComponent(u),i=null!=(t=this.angleMap[n])?t:0;e.angle=i+180,e.resetSystem()},s.pointAnimate=function(n){var t=this;return new Promise((function(e){var i;m.instance.playSFX("spin");var r=(null!=(i=t.angleMap[n])?i:0)+720+t.rotationOffset;t.rotationOffset+=720,d.instance.stopIdle(t.pointer),p(t.pointer).to(3,{angle:r},{easing:"cubicOut"}).call((function(){m.instance.playSFX("blowing"),d.instance.idleCompass(),e()})).start()}))},s.patchAnimate=function(){var n=o(a().mark((function n(t){return a().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,y.bounceScale(t);case 2:case"end":return n.stop()}}),n)})));return function(t){return n.apply(this,arguments)}}(),t}(f)).prototype,"pointer",[v],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),S=t(w.prototype,"windEffect",[b],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),h=w))||h));s._RF.pop()}}}));

System.register("bundle://main/_virtual/CompassController.ts",["./rollupPluginModLoBabelHelpers.js","cc","./CompassAnimation.ts"],(function(e){var t,r,n,i,o,s,a,c,u,l,p,f,h;return{setters:[function(e){t=e.applyDecoratedDescriptor,r=e.inheritsLoose,n=e.initializerDefineProperty,i=e.assertThisInitialized,o=e.createForOfIteratorHelperLoose,s=e.asyncToGenerator,a=e.regeneratorRuntime},function(e){c=e.cclegacy,u=e._decorator,l=e.Sprite,p=e.Component,f=e.director},function(e){h=e.CompassAnimation}],execute:function(){var m,v,d,C,S,b,y;c._RF.push({},"ed321HgZiBLGKDTC9/hdyVu","CompassController",void 0);var A=u.ccclass,D=u.property,W=function(e){return e[e.N=0]="N",e[e.NE=1]="NE",e[e.E=2]="E",e[e.SE=3]="SE",e[e.S=4]="S",e[e.SW=5]="SW",e[e.W=6]="W",e[e.NW=7]="NW",e}(W||{});e("CompassController",(m=A("CompassController"),v=D(h),d=D([l]),m((b=t((S=function(e){function t(){for(var t,r=arguments.length,o=new Array(r),s=0;s<r;s++)o[s]=arguments[s];return t=e.call.apply(e,[this].concat(o))||this,n(t,"compassAnimation",b,i(t)),n(t,"coverSprites",y,i(t)),t.allDirections=[W.N,W.NE,W.E,W.SE,W.S,W.SW,W.W,W.NW],t.usedDirections=[],t}r(t,e);var c=t.prototype;return c.start=function(){},c.hideAllCovers=function(){for(var e,t=o(this.coverSprites);!(e=t()).done;){e.value.node.active=!1}},c.showCover=function(){var e=s(a().mark((function e(t){var r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(0!=(r=this.coverSprites[t].node).active){e.next=5;break}return r.active=!0,e.next=5,this.compassAnimation.patchAnimate(r);case 5:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}(),c.autoBlowWind=function(){var e=s(a().mark((function e(){var t,r,n,i,s,c=this;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=o(this.usedDirections);case 1:if((r=t()).done){e.next=7;break}return n=r.value,e.next=5,this.showCover(n);case 5:e.next=1;break;case 7:if(0!==(i=this.allDirections.filter((function(e){return!c.usedDirections.includes(e)}))).length){e.next=10;break}return e.abrupt("return");case 10:return s=i[Math.floor(Math.random()*i.length)],this.usedDirections.push(s),e.next=14,this.compassAnimation.pointAnimate(W[s]);case 14:this.compassAnimation.blow(W[s]),f.emit("WIND_BLOW",W[s]);case 16:case"end":return e.stop()}}),e,this)})));return function(){return e.apply(this,arguments)}}(),c.reset=function(){this.usedDirections=[],this.hideAllCovers()},t}(p)).prototype,"compassAnimation",[v],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),y=t(S.prototype,"coverSprites",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),C=S))||C));c._RF.pop()}}}));

System.register("bundle://main/_virtual/EffectsHelper.ts",["cc"],(function(e){var n,t,c;return{setters:[function(e){n=e.cclegacy,t=e.Vec3,c=e.tween}],execute:function(){n._RF.push({},"07256waQwhMU6vjhrECp4MJ","EffectsHelper",void 0);e("EffectsHelper",function(){function e(){}return e.bounceScale=function(e,n){return void 0===n&&(n={}),new Promise((function(r){var u,i,a=null!=(u=n.duration)?u:.25,s=null!=(i=n.scale)?i:1.2;e.setScale(new t(.5,.5,1)),e.active=!0,c(e).to(a,{scale:new t(s,s,1)},{easing:"backOut"}).to(.1,{scale:new t(1,1,1)},{easing:"sineIn"}).call((function(){return r()})).start()}))},e}());n._RF.pop()}}}));

System.register("bundle://main/_virtual/FlowerAnimation.ts",["./rollupPluginModLoBabelHelpers.js","cc","./AudioHelper.ts"],(function(e){var o,t,n,r,i,l,a,c,p,s,u;return{setters:[function(e){o=e.applyDecoratedDescriptor,t=e.inheritsLoose,n=e.initializerDefineProperty,r=e.assertThisInitialized},function(e){i=e.cclegacy,l=e._decorator,a=e.Node,c=e.tween,p=e.UITransform,s=e.Component},function(e){u=e.AudioHelper}],execute:function(){var f,y,d,w,F;i._RF.push({},"53b63mRvBJHhIQccMJUmJaX","FlowerAnimation",void 0);var m=l.ccclass,v=l.property;e("FlowerAnimation",(f=m("FlowerAnimation"),y=v(a),f((F=o((w=function(e){function o(){for(var o,t=arguments.length,i=new Array(t),l=0;l<t;l++)i[l]=arguments[l];return o=e.call.apply(e,[this].concat(i))||this,n(o,"flyFlower",F,r(o)),o}return t(o,e),o.prototype.plant=function(e,o){var t=this;return new Promise((function(n){u.instance.playSFX("bubble-pop");var r=e.getWorldPosition(),i=o.getWorldPosition();t.flyFlower.active=!0,t.flyFlower.setWorldPosition(r);var l=r.clone();l.y+=10,l.x+=10,c(t.flyFlower).to(.2,{position:t.flyFlower.parent.getComponent(p).convertToNodeSpaceAR(l)},{easing:"quadOut"}).to(.5,{position:t.flyFlower.parent.getComponent(p).convertToNodeSpaceAR(i)},{easing:"quadInOut"}).call((function(){t.flyFlower.active=!1,n()})).start()}))},o}(s)).prototype,"flyFlower",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),d=w))||d));i._RF.pop()}}}));

System.register("bundle://main/_virtual/FlowerController.ts",["./rollupPluginModLoBabelHelpers.js","cc","./FlowerAnimation.ts","./TileController.ts","./IdleAnimations.ts"],(function(n){var e,t,o,r,i,l,a,s,c,u,f,p,w;return{setters:[function(n){e=n.applyDecoratedDescriptor,t=n.inheritsLoose,o=n.initializerDefineProperty,r=n.assertThisInitialized,i=n.asyncToGenerator,l=n.regeneratorRuntime},function(n){a=n.cclegacy,s=n._decorator,c=n.Node,u=n.Component},function(n){f=n.FlowerAnimation},function(n){p=n.TileController},function(n){w=n.IdelAnimations}],execute:function(){var h,d,I,m,v,y,C;a._RF.push({},"cf16aSCRT1PuJqI4iQAmW4b","FlowerController",void 0);var F=s.ccclass,b=s.property;n("FlowerController",(h=F("FlowerController"),d=b(c),I=b(f),h((y=e((v=function(n){function e(){for(var e,t=arguments.length,i=new Array(t),l=0;l<t;l++)i[l]=arguments[l];return e=n.call.apply(n,[this].concat(i))||this,o(e,"flowerContainer",y,r(e)),o(e,"flowerAnimation",C,r(e)),e.flowerIcons=void 0,e._lastFlowerIndex=9,e}t(e,n);var a=e.prototype;return a.onLoad=function(){this.flowerIcons=this.flowerContainer.children},a.init=function(n){this._lastFlowerIndex=n-1;for(var e=0;e<this.flowerIcons.length;e++)this.flowerIcons[e].active=e<n,e<=n-1&&this.flowerIcons[e].active?w.instance.idleIndicator(this.flowerIcons[e]):w.instance.stopIdle(this.flowerIcons[e])},a.plant=function(){var n=i(l().mark((function n(e){var t,o;return l().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return o=this.flowerIcons[this._lastFlowerIndex--],n.next=3,this.flowerAnimation.plant(o,e);case 3:o.active=!1,w.instance.stopIdle(o),null==(t=e.getComponent(p))||t.setFlower();case 6:case"end":return n.stop()}}),n,this)})));return function(e){return n.apply(this,arguments)}}(),e}(u)).prototype,"flowerContainer",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),C=e(v.prototype,"flowerAnimation",[I],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),m=v))||m));a._RF.pop()}}}));

System.register("bundle://main/_virtual/GameManager.ts",["./rollupPluginModLoBabelHelpers.js","cc","./PlantController.ts","./ResultPopup.ts","./LevelManager.ts","./CompassController.ts","./AudioHelper.ts"],(function(t){var e,n,r,i,o,a,s,l,u,c,h,p,f,m,g,d;return{setters:[function(t){e=t.applyDecoratedDescriptor,n=t.inheritsLoose,r=t.initializerDefineProperty,i=t.assertThisInitialized,o=t.asyncToGenerator,a=t.regeneratorRuntime},function(t){s=t.cclegacy,l=t._decorator,u=t.Label,c=t.director,h=t.Component},function(t){p=t.PlantController},function(t){f=t.ResultPopup},function(t){m=t.getLevelConfig},function(t){g=t.CompassController},function(t){d=t.AudioHelper}],execute:function(){var v,w,b,C,P,R,y,k,L,x,G,B;s._RF.push({},"a0000YzmrZNq6jS+N1zVPFc","GameManager",void 0);var I=l.ccclass,M=l.property,z=function(t){return t[t.Planting=0]="Planting",t[t.Blowing=1]="Blowing",t[t.GameOver=2]="GameOver",t}(z||{});t("GameManager",(v=I("GameManager"),w=M(p),b=M(u),C=M(f),P=M(g),v(((B=function(t){function e(){for(var e,n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];return(e=t.call.apply(t,[this].concat(o))||this).currentRound=0,e.maxRounds=7,e.isClickable=!0,e.phase=z.Planting,r(e,"plantController",k,i(e)),r(e,"instructionLabel",L,i(e)),r(e,"resultPopup",x,i(e)),r(e,"compassController",G,i(e)),e}n(e,t);var s=e.prototype;return s.onLoad=function(){e.instance=this,d.instance.playBGM()},s.start=function(){this.initGame(),c.on("TILE_CLICKED",this.plant,this),c.on("WIND_BLOW",this.blow,this)},s.initGame=function(){var t=parseInt(localStorage.getItem("currentLevel")||"1"),e=m(t);this.maxRounds=e.windCount,this.plantController.init(e.rows,e.windCount),this.resetGame()},s.resetGame=function(){this.plantController.reset(),this.compassController.reset(),this.currentRound=0,this.enterPlantingPhase()},s.nextLevel=function(){var t=parseInt(localStorage.getItem("currentLevel")||"1");localStorage.setItem("currentLevel",(t+1).toString()),this.initGame()},s.enterPlantingPhase=function(){this.currentRound++,this.setPhase(z.Planting)},s.enterBlowingPhase=function(){this.checkMediumResult(),this.setPhase(z.Blowing),this.compassController.autoBlowWind()},s.plant=function(){var t=o(a().mark((function t(e){var n=this;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(this.phase!=z.Planting||!this.isClickable){t.next=5;break}return this.isClickable=!1,t.next=4,this.plantController.plant(e);case 4:setTimeout((function(){n.enterBlowingPhase(),n.isClickable=!0}),1e3);case 5:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}(),s.blow=function(){var t=o(a().mark((function t(e){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(this.phase!=z.Blowing){t.next=4;break}return t.next=3,this.plantController.blow(e);case 3:this.checkRoundResult();case 4:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}(),s.setPhase=function(t){switch(this.phase=t,t){case z.Planting:this.instructionLabel.string="Click on a tile to plant a dandelion";break;case z.GameOver:this.instructionLabel.string="";break;case z.Blowing:this.instructionLabel.string="Tap a direction on the compass to blow the wind"}},s.checkRoundResult=function(){var t=o(a().mark((function t(){var e;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e=this.plantController.isBoardFullyCovered(),!(this.currentRound>=this.maxRounds||e)){t.next=8;break}return this.setPhase(z.GameOver),t.next=5,this.plantController.roundOver();case 5:e?this.showResult(!0):this.showResult(!1),t.next=9;break;case 8:this.enterPlantingPhase();case 9:case"end":return t.stop()}}),t,this)})));return function(){return t.apply(this,arguments)}}(),s.checkMediumResult=function(){this.plantController.isBoardFullyCovered()&&(this.setPhase(z.GameOver),this.showResult(!0))},s.showResult=function(){var t=o(a().mark((function t(e){var n=this;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:!0,this.resultPopup.showWin(!0,(function(){n.nextLevel()}));case 2:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}(),e}(h)).instance=void 0,k=e((y=B).prototype,"plantController",[w],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),L=e(y.prototype,"instructionLabel",[b],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),x=e(y.prototype,"resultPopup",[C],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),G=e(y.prototype,"compassController",[P],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),R=y))||R));s._RF.pop()}}}));

System.register("bundle://main/_virtual/GridAnimation.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var t,n,o,r,i,a,l,c,s,d,p,u,f,y,v;return{setters:[function(e){t=e.applyDecoratedDescriptor,n=e.inheritsLoose,o=e.initializerDefineProperty,r=e.assertThisInitialized},function(e){i=e.cclegacy,a=e._decorator,l=e.Prefab,c=e.Node,s=e.instantiate,d=e.director,p=e.UITransform,u=e.UIOpacity,f=e.tween,y=e.Vec3,v=e.Component}],execute:function(){var m,b,g,h,P,w,A;i._RF.push({},"b36e8kkMb9Mla9EpFZ/lAEs","GridAnimation",void 0);var C=a.ccclass,F=a.property;e("GridAnimation",(m=C("GridAnimation"),b=F(l),g=F(c),m((w=t((P=function(e){function t(){for(var t,n=arguments.length,i=new Array(n),a=0;a<n;a++)i[a]=arguments[a];return t=e.call.apply(e,[this].concat(i))||this,o(t,"seedFlyPrefab",w,r(t)),o(t,"windEffect",A,r(t)),t}return n(t,e),t.prototype.seedFly=function(e,t){var n=this;return new Promise((function(o){if(n.seedFlyPrefab){var r=s(n.seedFlyPrefab);n.node.addChild(r);var i=d.getScene().getChildByName("Canvas");i.addChild(r);var a=e.getWorldPosition(),l=t.getWorldPosition(),c=a.clone().lerp(l,.5);c.x+=80*(Math.random()-.5),c.y+=80*(Math.random()-.5),r.setWorldPosition(a);var v=i.getComponent(p).convertToNodeSpaceAR(a),m=i.getComponent(p).convertToNodeSpaceAR(c),b=i.getComponent(p).convertToNodeSpaceAR(l);r.setPosition(v);var g={value:0},h=360+360*Math.random(),P=r.getComponent(u);P&&(P.opacity=255),f(g).to(2,{value:1},{onUpdate:function(){var e=g.value,t=1-e,n=t*t*v.x+2*t*e*m.x+e*e*b.x,o=t*t*v.y+2*t*e*m.y+e*e*b.y;r.setPosition(new y(n,o,0)),r.angle=0+(h-0)*e;var i=1+(1.2-1)*e;r.setScale(new y(i,i,1)),P&&(P.opacity=255-75*e)}}).call((function(){r.destroy(),o()})).start()}}))},t}(v)).prototype,"seedFlyPrefab",[b],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),A=t(P.prototype,"windEffect",[g],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),h=P))||h));i._RF.pop()}}}));

System.register("bundle://main/_virtual/GridController.ts",["./rollupPluginModLoBabelHelpers.js","cc","./TileController.ts","./GridAnimation.ts"],(function(i){var e,t,r,n,o,s,l,a,d,u,c,f,h;return{setters:[function(i){e=i.applyDecoratedDescriptor,t=i.inheritsLoose,r=i.initializerDefineProperty,n=i.assertThisInitialized,o=i.createForOfIteratorHelperLoose},function(i){s=i.cclegacy,l=i._decorator,a=i.Prefab,d=i.instantiate,u=i.Vec3,c=i.Component},function(i){f=i.TileController},function(i){h=i.GridAnimation}],execute:function(){var g,p,v,S,z,m,C;s._RF.push({},"927d1nKTBBLgqY5/Ep52e2i","GridController",void 0);var y=l.ccclass,b=l.property,N={N:[-1,0],NE:[-1,1],E:[0,1],SE:[1,1],S:[1,0],SW:[1,-1],W:[0,-1],NW:[-1,-1]};i("GridController",(g=y("GridController"),p=b(a),v=b(h),g((m=e((z=function(i){function e(){for(var e,t=arguments.length,o=new Array(t),s=0;s<t;s++)o[s]=arguments[s];return(e=i.call.apply(i,[this].concat(o))||this).tileSize=100,e.spacing=2,r(e,"tilePrefab",m,n(e)),r(e,"gridAnimation",C,n(e)),e.tileNodes=[],e.gridSize=5,e}t(e,i);var s=e.prototype;return s.init=function(i){this.node.removeAllChildren(),this.gridSize=i;for(var e=-(this.gridSize*this.tileSize+(this.gridSize-1)*this.spacing)/2+this.tileSize/2,t=(this.gridSize*this.tileSize+(this.gridSize-1)*this.spacing)/2-this.tileSize/2,r=0;r<this.gridSize;r++){this.tileNodes[r]=[];for(var n=0;n<this.gridSize;n++){var o=d(this.tilePrefab);o.setPosition(new u(e+n*(this.tileSize+this.spacing),t-r*(this.tileSize+this.spacing),0)),this.node.addChild(o),this.tileNodes[r][n]=o,o.getComponent(f).init(r,n)}}},s.reset=function(){for(var i=0;i<this.gridSize;i++)for(var e=0;e<this.gridSize;e++){this.tileNodes[i][e].getComponent(f).setEmpty()}},s.roundOver=function(){var i=this;return new Promise((function(e){for(var t=1,r=0;r<i.gridSize;r++)for(var n=function(){var e=i.tileNodes[r][o].getComponent(f);e.isSeed()&&i.scheduleOnce((function(){e.setFinalFlower()}),.3*t),t++},o=0;o<i.gridSize;o++)n();i.scheduleOnce((function(){e()}),.3*t+1)}))},s.blowSeeds=function(i){var e=this;return new Promise((function(t){for(var r=[],n=N[i],o=n[0],s=n[1],l=0;l<e.gridSize;l++)for(var a=0;a<e.gridSize;a++){var d=e.tileNodes[l][a].getComponent(f);if(d.isFlower())for(var u=l+o,c=a+s,h=function(){var i=e.tileNodes[u][c].getComponent(f);if(!i.isFlower()){var t=e.gridAnimation.seedFly(d.node,i.node).then((function(){i.setSeed()}));r.push(t)}u+=o,c+=s};e.inBounds(u,c);)h()}0===r.length?t():Promise.all(r).then((function(){t()}))}))},s.inBounds=function(i,e){return i>=0&&i<this.gridSize&&e>=0&&e<this.gridSize},s.isBoardFullyCovered=function(){for(var i,e=o(this.tileNodes);!(i=e()).done;)for(var t,r=i.value,n=o(r);!(t=n()).done;){if(t.value.getComponent(f).isEmpty())return!1}return!0},e}(c)).prototype,"tilePrefab",[p],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),C=e(z.prototype,"gridAnimation",[v],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),S=z))||S));s._RF.pop()}}}));

System.register("bundle://main/_virtual/IdleAnimations.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(n){var e,i,t,o,s,a,r;return{setters:[function(n){e=n.inheritsLoose},function(n){i=n.cclegacy,t=n._decorator,o=n.find,s=n.tween,a=n.Vec3,r=n.Component}],execute:function(){var l,u;i._RF.push({},"cdd78pOz89KMKUEUB7o2RDu","IdleAnimations",void 0);var p=t.ccclass;t.property,n("IdelAnimations",p("IdelAnimations")(((u=function(n){function i(){return n.apply(this,arguments)||this}e(i,n);var t=i.prototype;return t.onLoad=function(){i.instance=this,this.idleCloud(),this.idleCompass()},t.idleCloud=function(){var n=o("Canvas/Center/RightPanel/Wind");n&&s(n).repeatForever(s().by(3,{position:new a(20,0,0)},{easing:"sineInOut"}).by(3,{position:new a(-20,0,0)},{easing:"sineInOut"})).start()},t.idleCompass=function(){var n=o("Canvas/Center/RightPanel/CompassPanel/Pointer");n&&s(n).repeatForever(s().by(1.2,{angle:5},{easing:"sineInOut"}).by(1.2,{angle:-5},{easing:"sineInOut"})).start()},t.stopIdle=function(n){s(n).stop()},t.idleIndicator=function(n){var e=Math.random();s(n).delay(e).repeatForever(s().by(1.4,{angle:2}).by(1.4,{angle:-2})).start()},t.idleTileFlower=function(n){s(n).repeatForever(s().by(1.4,{position:new a(0,4,0)},{easing:"sineInOut"}).by(1.4,{position:new a(0,-4,0)},{easing:"sineInOut"})).start()},t.idleTileSeed=function(n){s(n).repeatForever(s().by(2,{position:new a(0,3,0)},{easing:"sineInOut"}).by(2,{position:new a(0,-3,0)},{easing:"sineInOut"})).start()},i}(r)).instance=void 0,l=u))||l);i._RF.pop()}}}));

System.register("bundle://main/_virtual/LevelManager.ts",["cc"],(function(n){var e;return{setters:[function(n){e=n.cclegacy}],execute:function(){n("getLevelConfig",(function(n){return t[Math.min(n-1,t.length-1)]})),e._RF.push({},"0135eEnWntLcpY2ffWv6jeY","LevelManager",void 0);var t=n("LevelConfigs",[{rows:2,cols:2,windCount:2},{rows:3,cols:3,windCount:4},{rows:4,cols:4,windCount:5},{rows:5,cols:5,windCount:7}]);e._RF.pop()}}}));

System.register("bundle://main/_virtual/main",["./EffectsHelper.ts","./OneShotParticle.ts","./CompassController.ts","./FlowerController.ts","./GridController.ts","./PlantController.ts","./ResultPopup.ts","./TileController.ts","./CompassAnimation.ts","./FlowerAnimation.ts","./GridAnimation.ts","./IdleAnimations.ts","./ResultPopupAnimation.ts","./TileAnimation.ts","./GameManager.ts","./LevelManager.ts","./SceneSwitchAnimation.ts","./StartManager.ts","./AudioHelper.ts","./TimelineHelper.ts"],(function(){return{setters:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],execute:function(){}}}));

System.register("bundle://main/_virtual/OneShotParticle.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var e,r,n,o,i;return{setters:[function(t){e=t.inheritsLoose},function(t){r=t.cclegacy,n=t._decorator,o=t.ParticleSystem2D,i=t.Component}],execute:function(){var c;r._RF.push({},"2a606wOyVpItYUnzW74HPaB","OneShotParticle",void 0);var s=n.ccclass;n.property,t("VictoryParticle",s("VictoryParticle")(c=function(t){function r(){return t.apply(this,arguments)||this}return e(r,t),r.prototype.start=function(){var t=this,e=this.getComponent(o);e&&e.resetSystem(),setTimeout((function(){t.node.destroy()}),4e3)},r}(i))||c);r._RF.pop()}}}));

System.register("bundle://main/_virtual/PlantController.ts",["./rollupPluginModLoBabelHelpers.js","cc","./GridController.ts","./FlowerController.ts"],(function(r){var t,n,e,o,i,l,u,c,a,s,f;return{setters:[function(r){t=r.applyDecoratedDescriptor,n=r.inheritsLoose,e=r.initializerDefineProperty,o=r.assertThisInitialized,i=r.asyncToGenerator,l=r.regeneratorRuntime},function(r){u=r.cclegacy,c=r._decorator,a=r.Component},function(r){s=r.GridController},function(r){f=r.FlowerController}],execute:function(){var p,d,h,C,w,v,y;u._RF.push({},"856dcU59lJIR7+xm/FGgHiW","PlantController",void 0);var g=c.ccclass,b=c.property;r("PlantController",(p=g("PlantController"),d=b(f),h=b(s),p((v=t((w=function(r){function t(){for(var t,n=arguments.length,i=new Array(n),l=0;l<n;l++)i[l]=arguments[l];return t=r.call.apply(r,[this].concat(i))||this,e(t,"flowerController",v,o(t)),e(t,"gridController",y,o(t)),t.count=0,t.currentCount=0,t}n(t,r);var u=t.prototype;return u.init=function(r,t){this.count=t,this.flowerController.init(t),this.gridController.init(r)},u.reset=function(){this.flowerController.init(this.count),this.gridController.reset()},u.plant=function(){var r=i(l().mark((function r(t){return l().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,this.flowerController.plant(t);case 2:this.currentCount--;case 3:case"end":return r.stop()}}),r,this)})));return function(t){return r.apply(this,arguments)}}(),u.blow=function(){var r=i(l().mark((function r(t){return l().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,this.gridController.blowSeeds(t);case 2:case"end":return r.stop()}}),r,this)})));return function(t){return r.apply(this,arguments)}}(),u.roundOver=function(){var r=i(l().mark((function r(){return l().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,this.gridController.roundOver();case 2:case"end":return r.stop()}}),r,this)})));return function(){return r.apply(this,arguments)}}(),u.isBoardFullyCovered=function(){return this.gridController.isBoardFullyCovered()},t}(a)).prototype,"flowerController",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),y=t(w.prototype,"gridController",[h],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),C=w))||C));u._RF.pop()}}}));

System.register("bundle://main/_virtual/ResultPopup.ts",["./rollupPluginModLoBabelHelpers.js","cc","./ResultPopupAnimation.ts"],(function(t){var e,n,r,i,a,o,s,u,l,c,p,b;return{setters:[function(t){e=t.applyDecoratedDescriptor,n=t.inheritsLoose,r=t.initializerDefineProperty,i=t.assertThisInitialized,a=t.asyncToGenerator,o=t.regeneratorRuntime},function(t){s=t.cclegacy,u=t._decorator,l=t.Label,c=t.Button,p=t.Component},function(t){b=t.ResultPopupAnimation}],execute:function(){var f,h,L,d,g,m,y,v,R,E,w;s._RF.push({},"67522KS9wNPBaNKMCQj6MEU","ResultPopup",void 0);var P=u.ccclass,B=u.property;t("ResultPopup",(f=P("ResultPopup"),h=B(l),L=B(l),d=B(c),g=B(b),f((v=e((y=function(t){function e(){for(var e,n=arguments.length,a=new Array(n),o=0;o<n;o++)a[o]=arguments[o];return e=t.call.apply(t,[this].concat(a))||this,r(e,"titleLabel",v,i(e)),r(e,"descLabel",R,i(e)),r(e,"restartButton",E,i(e)),r(e,"animation",w,i(e)),e._onRestart=null,e}n(e,t);var s=e.prototype;return s.start=function(){var t=this;this.node.active=!1,this.restartButton.node.on(c.EventType.CLICK,(function(){t.node.active=!1,t._onRestart&&t._onRestart()}))},s.showWin=function(){var t=a(o().mark((function t(e,n){var r,i;return o().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r=this.restartButton.node.getChildByName("Label"),i=null==r?void 0:r.getComponent(l),this._onRestart=n,!e){t.next=12;break}if(this.titleLabel.string="LEVEL COMPLETED",this.descLabel.string=" 🎉 ",i.string="NEXT LEVEL",!e){t.next=10;break}return t.next=10,this.animation.showWin(this.node);case 10:t.next=15;break;case 12:this.titleLabel.string="LEVEL FAILED",this.descLabel.string=" ✖ ",i.string="RETRY";case 15:case"end":return t.stop()}}),t,this)})));return function(e,n){return t.apply(this,arguments)}}(),e}(p)).prototype,"titleLabel",[h],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),R=e(y.prototype,"descLabel",[L],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),E=e(y.prototype,"restartButton",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),w=e(y.prototype,"animation",[g],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),m=y))||m));s._RF.pop()}}}));

System.register("bundle://main/_virtual/ResultPopupAnimation.ts",["./rollupPluginModLoBabelHelpers.js","cc","./AudioHelper.ts","./TimelineHelper.ts","./EffectsHelper.ts"],(function(t){var e,n,r,i,o,a,c,s,u,l,p,f,h,y,P;return{setters:[function(t){e=t.applyDecoratedDescriptor,n=t.inheritsLoose,r=t.initializerDefineProperty,i=t.assertThisInitialized,o=t.asyncToGenerator,a=t.regeneratorRuntime},function(t){c=t.cclegacy,s=t._decorator,u=t.Prefab,l=t.instantiate,p=t.Component,f=t.sp},function(t){h=t.AudioHelper},function(t){y=t.wait},function(t){P=t.EffectsHelper}],execute:function(){var v,d,m,b,R;c._RF.push({},"50650YKPRlHZKhjTHtXKRcC","ResultPopupAnimation",void 0);var w=s.ccclass,g=s.property;t("ResultPopupAnimation",(v=w("ResultPopupAnimation"),d=g(u),v((R=e((b=function(t){function e(){for(var e,n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];return e=t.call.apply(t,[this].concat(o))||this,r(e,"victoryParticlePrefab",R,i(e)),e}n(e,t);var c=e.prototype;return c.showWin=function(){var t=o(a().mark((function t(e){var n;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this.showVictoryParticles(),h.instance.playSFX("tadaa"),t.next=4,y(2500);case 4:return e.active=!0,n=e.getChildByName("DescLabelContainer"),n.getComponent(f.Skeleton).setAnimation(0,"animation",!0),t.next=10,this.popupResultPanel(e);case 10:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}(),c.showVictoryParticles=function(){var t=l(this.victoryParticlePrefab);t.setPosition(0,0),this.node.addChild(t)},c.popupResultPanel=function(){var t=o(a().mark((function t(e){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,P.bounceScale(e);case 2:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),e}(p)).prototype,"victoryParticlePrefab",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),m=b))||m));c._RF.pop()}}}));

System.register("bundle://main/_virtual/rollupPluginModLoBabelHelpers.js",[],(function(t){return{execute:function(){function r(t,r,e,n,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void e(t)}c.done?r(u):Promise.resolve(u).then(n,o)}function e(r,n){return(e=t("setPrototypeOf",Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,r){return t.__proto__=r,t}))(r,n)}function n(t,r){if(t){if("string"==typeof t)return o(t,r);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?o(t,r):void 0}}function o(t,r){(null==r||r>t.length)&&(r=t.length);for(var e=0,n=new Array(r);e<r;e++)n[e]=t[e];return n}t({applyDecoratedDescriptor:function(t,r,e,n,o){var i={};Object.keys(n).forEach((function(t){i[t]=n[t]})),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0);i=e.slice().reverse().reduce((function(e,n){return n(t,r,e)||e}),i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0);void 0===i.initializer&&(Object.defineProperty(t,r,i),i=null);return i},arrayLikeToArray:o,assertThisInitialized:function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t},asyncToGenerator:function(t){return function(){var e=this,n=arguments;return new Promise((function(o,i){var a=t.apply(e,n);function c(t){r(a,o,i,c,u,"next",t)}function u(t){r(a,o,i,c,u,"throw",t)}c(void 0)}))}},createForOfIteratorHelperLoose:function(t,r){var e="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(e)return(e=e.call(t)).next.bind(e);if(Array.isArray(t)||(e=n(t))||r&&t&&"number"==typeof t.length){e&&(t=e);var o=0;return function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},inheritsLoose:function(t,r){t.prototype=Object.create(r.prototype),t.prototype.constructor=t,e(t,r)},initializerDefineProperty:function(t,r,e,n){if(!e)return;Object.defineProperty(t,r,{enumerable:e.enumerable,configurable:e.configurable,writable:e.writable,value:e.initializer?e.initializer.call(n):void 0})},regeneratorRuntime:function(){
/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
t("regeneratorRuntime",(function(){return e}));var r,e={},n=Object.prototype,o=n.hasOwnProperty,i=Object.defineProperty||function(t,r,e){t[r]=e.value},a="function"==typeof Symbol?Symbol:{},c=a.iterator||"@@iterator",u=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function f(t,r,e){return Object.defineProperty(t,r,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[r]}try{f({},"")}catch(r){f=function(t,r,e){return t[r]=e}}function s(t,r,e,n){var o=r&&r.prototype instanceof g?r:g,a=Object.create(o.prototype),c=new k(n||[]);return i(a,"_invoke",{value:_(t,e,c)}),a}function h(t,r,e){try{return{type:"normal",arg:t.call(r,e)}}catch(t){return{type:"throw",arg:t}}}e.wrap=s;var p="suspendedStart",y="executing",v="completed",d={};function g(){}function m(){}function b(){}var w={};f(w,c,(function(){return this}));var L=Object.getPrototypeOf,x=L&&L(L(z([])));x&&x!==n&&o.call(x,c)&&(w=x);var O=b.prototype=g.prototype=Object.create(w);function E(t){["next","throw","return"].forEach((function(r){f(t,r,(function(t){return this._invoke(r,t)}))}))}function j(t,r){function e(n,i,a,c){var u=h(t[n],t,i);if("throw"!==u.type){var l=u.arg,f=l.value;return f&&"object"==typeof f&&o.call(f,"__await")?r.resolve(f.__await).then((function(t){e("next",t,a,c)}),(function(t){e("throw",t,a,c)})):r.resolve(f).then((function(t){l.value=t,a(l)}),(function(t){return e("throw",t,a,c)}))}c(u.arg)}var n;i(this,"_invoke",{value:function(t,o){function i(){return new r((function(r,n){e(t,o,r,n)}))}return n=n?n.then(i,i):i()}})}function _(t,e,n){var o=p;return function(i,a){if(o===y)throw new Error("Generator is already running");if(o===v){if("throw"===i)throw a;return{value:r,done:!0}}for(n.method=i,n.arg=a;;){var c=n.delegate;if(c){var u=P(c,n);if(u){if(u===d)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===p)throw o=v,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=y;var l=h(t,e,n);if("normal"===l.type){if(o=n.done?v:"suspendedYield",l.arg===d)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(o=v,n.method="throw",n.arg=l.arg)}}}function P(t,e){var n=e.method,o=t.iterator[n];if(o===r)return e.delegate=null,"throw"===n&&t.iterator.return&&(e.method="return",e.arg=r,P(t,e),"throw"===e.method)||"return"!==n&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+n+"' method")),d;var i=h(o,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,d;var a=i.arg;return a?a.done?(e[t.resultName]=a.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=r),e.delegate=null,d):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,d)}function S(t){var r={tryLoc:t[0]};1 in t&&(r.catchLoc=t[1]),2 in t&&(r.finallyLoc=t[2],r.afterLoc=t[3]),this.tryEntries.push(r)}function T(t){var r=t.completion||{};r.type="normal",delete r.arg,t.completion=r}function k(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(S,this),this.reset(!0)}function z(t){if(t||""===t){var e=t[c];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,i=function e(){for(;++n<t.length;)if(o.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=r,e.done=!0,e};return i.next=i}}throw new TypeError(typeof t+" is not iterable")}return m.prototype=b,i(O,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:m,configurable:!0}),m.displayName=f(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var r="function"==typeof t&&t.constructor;return!!r&&(r===m||"GeneratorFunction"===(r.displayName||r.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,f(t,l,"GeneratorFunction")),t.prototype=Object.create(O),t},e.awrap=function(t){return{__await:t}},E(j.prototype),f(j.prototype,u,(function(){return this})),e.AsyncIterator=j,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new j(s(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},E(O),f(O,l,"Generator"),f(O,c,(function(){return this})),f(O,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var r=Object(t),e=[];for(var n in r)e.push(n);return e.reverse(),function t(){for(;e.length;){var n=e.pop();if(n in r)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=z,k.prototype={constructor:k,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(T),!t)for(var e in this)"t"===e.charAt(0)&&o.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(n,o){return c.type="throw",c.arg=t,e.next=n,o&&(e.method="next",e.arg=r),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return n("end");if(a.tryLoc<=this.prev){var u=o.call(a,"catchLoc"),l=o.call(a,"finallyLoc");if(u&&l){if(this.prev<a.catchLoc)return n(a.catchLoc,!0);if(this.prev<a.finallyLoc)return n(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return n(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return n(a.finallyLoc)}}}},abrupt:function(t,r){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc<=this.prev&&o.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var i=n;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=r&&r<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=r,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(a)},complete:function(t,r){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&r&&(this.next=r),d},finish:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),T(e),d}},catch:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.tryLoc===t){var n=e.completion;if("throw"===n.type){var o=n.arg;T(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:z(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=r),d}},e},setPrototypeOf:e,unsupportedIterableToArray:n})}}}));

System.register("bundle://main/_virtual/SceneSwitchAnimation.ts",["./rollupPluginModLoBabelHelpers.js","cc","./AudioHelper.ts"],(function(t){var e,n,o,i,r,a,c,u,s,l,p,d;return{setters:[function(t){e=t.applyDecoratedDescriptor,n=t.inheritsLoose,o=t.initializerDefineProperty,i=t.assertThisInitialized},function(t){r=t.cclegacy,a=t._decorator,c=t.Node,u=t.UIOpacity,s=t.tween,l=t.Vec3,p=t.Component},function(t){d=t.AudioHelper}],execute:function(){var f,h,m,y,w;r._RF.push({},"ad974rHdelF87WmmoGkUViU","SceneSwitchAnimation",void 0);var S=a.ccclass,v=a.property;t("SceneSwitchAnimation",(f=S("SceneSwitchAnimation"),h=v(c),f((w=e((y=function(t){function e(){for(var e,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return e=t.call.apply(t,[this].concat(r))||this,o(e,"rootNode",w,i(e)),e}n(e,t);var r=e.prototype;return r.start=function(){},r.update=function(t){},r.switch=function(){var t=this;return new Promise((function(e){d.instance.playSFX("swish");var n=t.rootNode.getComponent(u);n||(n=t.rootNode.addComponent(u)),s(t.rootNode).to(.5,{scale:new l(.3,.3,1)},{easing:"quadInOut"}).start(),s(n).to(.5,{opacity:0},{easing:"quadInOut"}).call((function(){e()})).start()}))},e}(p)).prototype,"rootNode",[h],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),m=y))||m));r._RF.pop()}}}));

System.register("bundle://main/_virtual/StartManager.ts",["./rollupPluginModLoBabelHelpers.js","cc","./SceneSwitchAnimation.ts"],(function(n){var t,e,r,a,i,o,c,s,u,l,p;return{setters:[function(n){t=n.applyDecoratedDescriptor,e=n.inheritsLoose,r=n.initializerDefineProperty,a=n.assertThisInitialized,i=n.asyncToGenerator,o=n.regeneratorRuntime},function(n){c=n.cclegacy,s=n._decorator,u=n.Component,l=n.director},function(n){p=n.SceneSwitchAnimation}],execute:function(){var f,h,m,d,g;c._RF.push({},"b7820Ibl8lE8a/m7g4FqHbp","StartManager",void 0);var y=s.ccclass,S=s.property;n("StartManager",(f=y("StartManager"),h=S(p),f((g=t((d=function(n){function t(){for(var t,e=arguments.length,i=new Array(e),o=0;o<e;o++)i[o]=arguments[o];return t=n.call.apply(n,[this].concat(i))||this,r(t,"sceneAnimation",g,a(t)),t}e(t,n);var c=t.prototype;return c.start=function(){},c.update=function(n){},c.onStartGame=function(){var n=i(o().mark((function n(){return o().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,this.sceneAnimation.switch();case 2:l.loadScene("dandelion");case 3:case"end":return n.stop()}}),n,this)})));return function(){return n.apply(this,arguments)}}(),t}(u)).prototype,"sceneAnimation",[h],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),m=d))||m));c._RF.pop()}}}));

System.register("bundle://main/_virtual/TileAnimation.ts",["./rollupPluginModLoBabelHelpers.js","cc","./AudioHelper.ts","./EffectsHelper.ts"],(function(e){var n,t,r,o,i,c,u,s;return{setters:[function(e){n=e.inheritsLoose,t=e.asyncToGenerator,r=e.regeneratorRuntime},function(e){o=e.cclegacy,i=e._decorator,c=e.Component},function(e){u=e.AudioHelper},function(e){s=e.EffectsHelper}],execute:function(){var a;o._RF.push({},"773624mcfpELo13mt1ts7jO","TileAnimation",void 0);var p=i.ccclass;i.property,e("TileAnimation",p("TileAnimation")(a=function(e){function o(){return e.apply(this,arguments)||this}return n(o,e),o.prototype.switchToFlower=function(){var e=t(r().mark((function e(n){return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return u.instance.playSFX("sparkle"),e.next=3,s.bounceScale(n);case 3:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),o}(c))||a);o._RF.pop()}}}));

System.register("bundle://main/_virtual/TileController.ts",["./rollupPluginModLoBabelHelpers.js","cc","./TileAnimation.ts"],(function(e){var t,i,n,o,s,a,r,l,d,c;return{setters:[function(e){t=e.applyDecoratedDescriptor,i=e.inheritsLoose,n=e.initializerDefineProperty,o=e.assertThisInitialized},function(e){s=e.cclegacy,a=e._decorator,r=e.Node,l=e.director,d=e.Component},function(e){c=e.TileAnimation}],execute:function(){var p,h,u,S,m;s._RF.push({},"c0f27p3AoRMq76p18EoW8hV","TileController",void 0);var N=a.ccclass,f=a.property,y=function(e){return e[e.Empty=0]="Empty",e[e.Dandelion=1]="Dandelion",e[e.Seed=2]="Seed",e}(y||{});e("TileController",(p=N("TileController"),h=f(c),p((m=t((S=function(e){function t(){for(var t,i=arguments.length,s=new Array(i),a=0;a<i;a++)s[a]=arguments[a];return t=e.call.apply(e,[this].concat(s))||this,n(t,"tileAnimation",m,o(t)),t.state=y.Empty,t.maskSpriteNode=null,t.flowerSpriteNode=null,t.seedSpriteNode=null,t.dandelionSpriteNode=null,t}i(t,e);var s=t.prototype;return s.onLoad=function(){this.maskSpriteNode=this.node.getChildByName("MaskSprite"),this.flowerSpriteNode=this.node.getChildByName("FlowerNode"),this.seedSpriteNode=this.node.getChildByName("SeedNode"),this.dandelionSpriteNode=this.node.getChildByName("DandelionNode"),this.updateVisual()},s.init=function(e,t){this.node.on(r.EventType.TOUCH_END,this.onClick,this)},s.onClick=function(){this.state!==y.Empty&&this.state!==y.Seed||l.emit("TILE_CLICKED",this.node)},s.updateVisual=function(){switch(this.maskSpriteNode.active=!1,this.flowerSpriteNode.active=!1,this.seedSpriteNode.active=!1,this.dandelionSpriteNode.active=!1,this.state){case y.Empty:this.maskSpriteNode.active=!1;break;case y.Dandelion:this.maskSpriteNode.active=!0,this.dandelionSpriteNode.active=!0;break;case y.Seed:this.seedSpriteNode.active=!0}},s.setFlower=function(){this.state=y.Dandelion,this.updateVisual()},s.setSeed=function(){this.state=y.Seed,this.updateVisual()},s.setEmpty=function(){this.state=y.Empty,this.updateVisual()},s.setFinalFlower=function(){this.seedSpriteNode.active=!1,this.maskSpriteNode.active=!0,this.dandelionSpriteNode.active=!0,this.tileAnimation.switchToFlower(this.node)},s.isFlower=function(){return this.state==y.Dandelion},s.isEmpty=function(){return this.state==y.Empty},s.isSeed=function(){return this.state==y.Seed},t}(d)).prototype,"tileAnimation",[h],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),u=S))||u));s._RF.pop()}}}));

System.register("bundle://main/_virtual/TimelineHelper.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var n,t,r,i;return{setters:[function(e){n=e.asyncToGenerator,t=e.regeneratorRuntime,r=e.createForOfIteratorHelperLoose},function(e){i=e.cclegacy}],execute:function(){e("wait",(function(e){return new Promise((function(n){return setTimeout(n,e)}))})),i._RF.push({},"5d487VIxChIOa4+/vgmMhyl","TimelineHelper",void 0);e("TimelineHelper",function(){function e(){}return e.run=function(){var e=n(t().mark((function e(n,i){var u,a,o;return t().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:void 0===i&&(i=0),u=r(n);case 2:if((a=u()).done){e.next=11;break}return o=a.value,e.next=6,o();case 6:if(!(i>0)){e.next=9;break}return e.next=9,this.wait(i);case 9:e.next=2;break;case 11:case"end":return e.stop()}}),e,this)})));return function(n,t){return e.apply(this,arguments)}}(),e.wait=function(e){return new Promise((function(n){return setTimeout(n,e)}))},e.runWithDelays=function(){var e=n(t().mark((function e(n){var i,u,a,o,c;return t().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:i=r(n);case 1:if((u=i()).done){e.next=10;break}return a=u.value,o=a[0],c=a[1],e.next=5,o();case 5:if(void 0===c){e.next=8;break}return e.next=8,this.wait(c);case 8:e.next=1;break;case 10:case"end":return e.stop()}}),e,this)})));return function(n){return e.apply(this,arguments)}}(),e}());i._RF.pop()}}}));

(function(r) {
  r('virtual:///prerequisite-imports/main', 'bundle://main/_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
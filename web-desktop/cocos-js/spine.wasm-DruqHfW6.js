System.register(["./_virtual_cc-Bt3CIenk.js"],(function(n){"use strict";var t;return{setters:[function(n){t=n._}],execute:function(){var r;n("default",(r="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,function(n){var e,i,o;void 0===n&&(n={}),e||(e=void 0!==n?n:{}),e.ready=new Promise((function(n,t){i=n,o=t}));var u=Object.assign({},e),a="";"undefined"!=typeof document&&document.currentScript&&(a=document.currentScript.src),r&&(a=r),a=0!==a.indexOf("blob:")?a.substr(0,a.replace(/[?#].*/,"").lastIndexOf("/")+1):"";var c,f=e.printErr||console.error.bind(console);Object.assign(e,u),u=null,e.wasmBinary&&(c=e.wasmBinary),e.noExitRuntime,"object"!=typeof WebAssembly&&U("no native wasm support detected");var s,l,v,h,d,p,y,m,b,w=!1;function g(){var n=s.buffer;e.HEAP8=l=new Int8Array(n),e.HEAP16=h=new Int16Array(n),e.HEAP32=p=new Int32Array(n),e.HEAPU8=v=new Uint8Array(n),e.HEAPU16=d=new Uint16Array(n),e.HEAPU32=y=new Uint32Array(n),e.HEAPF32=m=new Float32Array(n),e.HEAPF64=b=new Float64Array(n)}var A,T=[],k=[],j=[];function C(){var n=e.preRun.shift();T.unshift(n)}var O,P=0,W=null;function U(n){throw e.onAbort&&e.onAbort(n),f(n="Aborted("+n+")"),w=!0,n=new WebAssembly.RuntimeError(n+". Build with -sASSERTIONS for more info."),o(n),n}function S(n){return n.startsWith("data:application/octet-stream;base64,")}if(!S(O="spine.wasm")){var F=O;O=e.locateFile?e.locateFile(F,a):a+F}function E(n){try{if(n==O&&c)return new Uint8Array(c);throw"both async and sync fetching of the wasm failed"}catch(n){U(n)}}function I(n){return c||"function"!=typeof fetch?Promise.resolve().then((function(){return E(n)})):fetch(n,{credentials:"same-origin"}).then((function(t){if(!t.ok)throw"failed to load wasm binary file at '"+n+"'";return t.arrayBuffer()})).catch((function(){return E(n)}))}function x(n,t,r){return I(n).then((function(n){return WebAssembly.instantiate(n,t)})).then((function(n){return n})).then(r,(function(n){f("failed to asynchronously prepare wasm: "+n),U(n)}))}function M(n,t){var r=O;return c||"function"!=typeof WebAssembly.instantiateStreaming||S(r)||"function"!=typeof fetch?x(r,n,t):fetch(r,{credentials:"same-origin"}).then((function(e){return WebAssembly.instantiateStreaming(e,n).then(t,(function(e){return f("wasm streaming compile failed: "+e),f("falling back to ArrayBuffer instantiation"),x(r,n,t)}))}))}var _={20796:function(n){console.log(n?Rn(n):"")},20831:function(n){console.warn("[Spine]",n?Rn(n):"")}};function z(n){for(;0<n.length;)n.shift()(e)}function H(n){switch(n){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+n)}}var V=void 0;function B(n){for(var t="";v[n];)t+=V[v[n++]];return t}var R={},q={},L={};function D(n){if(void 0===n)return"_unknown";var t=(n=n.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return 48<=t&&57>=t?"_"+n:n}function N(n,t){var r;return(r={},r[n=D(n)]=function(){return t.apply(this,arguments)},r)[n]}function Z(n){var t=Error,r=N(n,(function(t){this.name=n,this.message=t,void 0!==(t=Error(t).stack)&&(this.stack=this.toString()+"\n"+t.replace(/^Error(:[^\n]*)?\n/,""))}));return r.prototype=Object.create(t.prototype),r.prototype.constructor=r,r.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},r}var $=void 0;function G(n){throw new $(n)}var J=void 0;function K(n){throw new J(n)}function Q(n,t,r){function e(t){(t=r(t)).length!==n.length&&K("Mismatched type converter count");for(var e=0;e<n.length;++e)X(n[e],t[e])}n.forEach((function(n){L[n]=t}));var i=Array(t.length),o=[],u=0;t.forEach((function(n,t){q.hasOwnProperty(n)?i[t]=q[n]:(o.push(n),R.hasOwnProperty(n)||(R[n]=[]),R[n].push((function(){i[t]=q[n],++u===o.length&&e(i)})))})),0===o.length&&e(i)}function X(n,t){if(!("argPackAdvance"in t))throw new TypeError("registerType registeredInstance requires argPackAdvance");var r=t.name;if(n||G('type "'+r+'" must have a positive integer typeid pointer'),q.hasOwnProperty(n)){if({}.qa)return;G("Cannot register type '"+r+"' twice")}q[n]=t,delete L[n],R.hasOwnProperty(n)&&(t=R[n],delete R[n],t.forEach((function(n){return n()})))}function Y(n){G(n.F.I.G.name+" instance already deleted")}var nn=!1;function tn(){}function rn(n){--n.count.value,0===n.count.value&&(n.L?n.M.S(n.L):n.I.G.S(n.H))}function en(n,t,r){return t===r?n:void 0===r.J||null===(n=en(n,t,r.J))?null:r.ha(n)}var on={},un=[];function an(){for(;un.length;){var n=un.pop();n.F.U=!1,n.delete()}}var cn=void 0,fn={};function sn(n,t){for(void 0===t&&G("ptr should not be undefined");n.J;)t=n.W(t),n=n.J;return fn[t]}function ln(n,t){return t.I&&t.H||K("makeClassHandle requires ptr and ptrType"),!!t.M!=!!t.L&&K("Both smartPtrType and smartPtr must be specified"),t.count={value:1},vn(Object.create(n,{F:{value:t}}))}function vn(n){return"undefined"==typeof FinalizationRegistry?(vn=function(n){return n},n):(nn=new FinalizationRegistry((function(n){rn(n.F)})),tn=function(n){nn.unregister(n)},(vn=function(n){var t=n.F;return t.L&&nn.register(n,{F:t},n),n})(n))}function hn(){}function dn(n,t,r){if(void 0===n[t].K){var e=n[t];n[t]=function(){return n[t].K.hasOwnProperty(arguments.length)||G("Function '"+r+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+n[t].K+")!"),n[t].K[arguments.length].apply(this,arguments)},n[t].K=[],n[t].K[e.T]=e}}function pn(n,t){e.hasOwnProperty(n)?(G("Cannot register public name '"+n+"' twice"),dn(e,n,n),e.hasOwnProperty(void 0)&&G("Cannot register multiple overloads of a function with the same number of arguments (undefined)!"),e[n].K[void 0]=t):e[n]=t}function yn(n,t,r,e,i,o,u,a){this.name=n,this.constructor=t,this.P=r,this.S=e,this.J=i,this.ia=o,this.W=u,this.ha=a,this.la=[]}function mn(n,t,r){for(;t!==r;)t.W||G("Expected null or instance of "+r.name+", got an instance of "+t.name),n=t.W(n),t=t.J;return n}function bn(n,t){return null===t?(this.$&&G("null is not a valid "+this.name),0):(t.F||G('Cannot pass "'+zn(t)+'" as a '+this.name),t.F.H||G("Cannot pass deleted object as a pointer of type "+this.name),mn(t.F.H,t.F.I.G,this.G))}function wn(n,t){if(null===t){if(this.$&&G("null is not a valid "+this.name),this.Z){var r=this.ma();return null!==n&&n.push(this.S,r),r}return 0}if(t.F||G('Cannot pass "'+zn(t)+'" as a '+this.name),t.F.H||G("Cannot pass deleted object as a pointer of type "+this.name),!this.Y&&t.F.I.Y&&G("Cannot convert argument of type "+(t.F.M?t.F.M.name:t.F.I.name)+" to parameter type "+this.name),r=mn(t.F.H,t.F.I.G,this.G),this.Z)switch(void 0===t.F.L&&G("Passing raw pointer to smart pointer is illegal"),this.pa){case 0:t.F.M===this?r=t.F.L:G("Cannot convert argument of type "+(t.F.M?t.F.M.name:t.F.I.name)+" to parameter type "+this.name);break;case 1:r=t.F.L;break;case 2:if(t.F.M===this)r=t.F.L;else{var e=t.clone();r=this.na(r,_n((function(){e.delete()}))),null!==n&&n.push(this.S,r)}break;default:G("Unsupporting sharing policy")}return r}function gn(n,t){return null===t?(this.$&&G("null is not a valid "+this.name),0):(t.F||G('Cannot pass "'+zn(t)+'" as a '+this.name),t.F.H||G("Cannot pass deleted object as a pointer of type "+this.name),t.F.I.Y&&G("Cannot convert argument of type "+t.F.I.name+" to parameter type "+this.name),mn(t.F.H,t.F.I.G,this.G))}function An(n){return this.fromWireType(p[n>>2])}function Tn(n,t,r,e){this.name=n,this.G=t,this.$=r,this.Y=e,this.Z=!1,this.S=this.na=this.ma=this.da=this.pa=this.ka=void 0,void 0!==t.J?this.toWireType=wn:(this.toWireType=e?bn:gn,this.O=null)}function kn(n,t){e.hasOwnProperty(n)||K("Replacing nonexistant public symbol"),e[n]=t,e[n].T=void 0}function jn(n,t){var r=[];return function(){if(r.length=0,Object.assign(r,arguments),n.includes("j")){var i=e["dynCall_"+n];i=r.length?i.apply(null,[t].concat(r)):i.call(null,t)}else i=A.get(t).apply(null,r);return i}}function Cn(n,t){var r=(n=B(n)).includes("j")?jn(n,t):A.get(t);return"function"!=typeof r&&G("unknown function pointer with signature "+n+": "+t),r}var On=void 0;function Pn(n){var t=B(n=Yn(n));return Xn(n),t}function Wn(n,t){var r=[],e={};throw t.forEach((function n(t){e[t]||q[t]||(L[t]?L[t].forEach(n):(r.push(t),e[t]=!0))})),new On(n+": "+r.map(Pn).join([", "]))}function Un(n){for(;n.length;){var t=n.pop();n.pop()(t)}}function Sn(n,t,r,e,i){var o=t.length;2>o&&G("argTypes array size mismatch! Must at least get return value and 'this' types!");var u=null!==t[1]&&null!==r,a=!1;for(r=1;r<t.length;++r)if(null!==t[r]&&void 0===t[r].O){a=!0;break}var c="void"!==t[0].name,f=o-2,s=Array(f),l=[],v=[];return function(){if(arguments.length!==f&&G("function "+n+" called with "+arguments.length+" arguments, expected "+f+" args!"),v.length=0,l.length=u?2:1,l[0]=i,u){var r=t[1].toWireType(v,this);l[1]=r}for(var o=0;o<f;++o)s[o]=t[o+2].toWireType(v,arguments[o]),l.push(s[o]);if(o=e.apply(null,l),a)Un(v);else for(var h=u?1:2;h<t.length;h++){var d=1===h?r:s[h-2];null!==t[h].O&&t[h].O(d)}return c?t[0].fromWireType(o):void 0}}function Fn(n,t){for(var r=[],e=0;e<n;e++)r.push(y[t+4*e>>2]);return r}function En(n,t,r){return n instanceof Object||G(r+' with invalid "this": '+n),n instanceof t.G.constructor||G(r+' incompatible with "this" of type '+n.constructor.name),n.F.H||G("cannot call emscripten binding method "+r+" on deleted object"),mn(n.F.H,n.F.I.G,t.G)}var In=new function(){this.N=[void 0],this.aa=[],this.get=function(n){return this.N[n]},this.has=function(n){return void 0!==this.N[n]},this.ea=function(n){var t=this.aa.pop()||this.N.length;return this.N[t]=n,t},this.fa=function(n){this.N[n]=void 0,this.aa.push(n)}};function xn(n){n>=In.ba&&0==--In.get(n).oa&&In.fa(n)}var Mn=function(n){return n||G("Cannot use deleted val. handle = "+n),In.get(n).value},_n=function(n){switch(n){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return In.ea({oa:1,value:n})}};function zn(n){if(null===n)return"null";var t=typeof n;return"object"===t||"array"===t||"function"===t?n.toString():""+n}function Hn(n,t){switch(t){case 2:return function(n){return this.fromWireType(m[n>>2])};case 3:return function(n){return this.fromWireType(b[n>>3])};default:throw new TypeError("Unknown float type: "+n)}}function Vn(n,t,r){switch(t){case 0:return r?function(n){return l[n]}:function(n){return v[n]};case 1:return r?function(n){return h[n>>1]}:function(n){return d[n>>1]};case 2:return r?function(n){return p[n>>2]}:function(n){return y[n>>2]};default:throw new TypeError("Unknown integer type: "+n)}}var Bn="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function Rn(n,t){var r=v,e=n+t;for(t=n;r[t]&&!(t>=e);)++t;if(16<t-n&&r.buffer&&Bn)return Bn.decode(r.subarray(n,t));for(e="";n<t;){var i=r[n++];if(128&i){var o=63&r[n++];if(192==(224&i))e+=String.fromCharCode((31&i)<<6|o);else{var u=63&r[n++];65536>(i=224==(240&i)?(15&i)<<12|o<<6|u:(7&i)<<18|o<<12|u<<6|63&r[n++])?e+=String.fromCharCode(i):(i-=65536,e+=String.fromCharCode(55296|i>>10,56320|1023&i))}}else e+=String.fromCharCode(i)}return e}function qn(n,t){var r=q[n];return void 0===r&&G(t+" has unknown type "+Pn(n)),r}var Ln={},Dn=[];function Nn(){var n=e.SpineWasmUtil,t=n.getCurrentListenerID(),r=n.getCurrentTrackEntry(),i=n.getCurrentEvent();n=n.getCurrentEventType(),globalThis.TrackEntryListeners.emitListener(t,r,i,n)}function Zn(){var n=e.SpineWasmUtil,t=n.getCurrentListenerID(),r=n.getCurrentEventType(),i=n.getCurrentTrackEntry();n=n.getCurrentEvent(),globalThis.TrackEntryListeners.emitTrackEntryListener(t,i,n,r)}e._spineListenerCallBackFromJS=Nn,e._spineTrackListenerCallback=Zn;for(var $n=Array(256),Gn=0;256>Gn;++Gn)$n[Gn]=String.fromCharCode(Gn);V=$n,$=e.BindingError=Z("BindingError"),J=e.InternalError=Z("InternalError"),hn.prototype.isAliasOf=function(n){if(!(this instanceof hn&&n instanceof hn))return!1;var t=this.F.I.G,r=this.F.H,e=n.F.I.G;for(n=n.F.H;t.J;)r=t.W(r),t=t.J;for(;e.J;)n=e.W(n),e=e.J;return t===e&&r===n},hn.prototype.clone=function(){if(this.F.H||Y(this),this.F.V)return this.F.count.value+=1,this;var n=vn,t=Object,r=t.create,e=Object.getPrototypeOf(this),i=this.F;return(n=n(r.call(t,e,{F:{value:{count:i.count,U:i.U,V:i.V,H:i.H,I:i.I,L:i.L,M:i.M}}}))).F.count.value+=1,n.F.U=!1,n},hn.prototype.delete=function(){this.F.H||Y(this),this.F.U&&!this.F.V&&G("Object already scheduled for deletion"),tn(this),rn(this.F),this.F.V||(this.F.L=void 0,this.F.H=void 0)},hn.prototype.isDeleted=function(){return!this.F.H},hn.prototype.deleteLater=function(){return this.F.H||Y(this),this.F.U&&!this.F.V&&G("Object already scheduled for deletion"),un.push(this),1===un.length&&cn&&cn(an),this.F.U=!0,this},e.getInheritedInstanceCount=function(){return Object.keys(fn).length},e.getLiveInheritedInstances=function(){var n,t=[];for(n in fn)fn.hasOwnProperty(n)&&t.push(fn[n]);return t},e.flushPendingDeletes=an,e.setDelayFunction=function(n){cn=n,un.length&&cn&&cn(an)},Tn.prototype.ja=function(n){return this.da&&(n=this.da(n)),n},Tn.prototype.ca=function(n){this.S&&this.S(n)},Tn.prototype.argPackAdvance=8,Tn.prototype.readValueFromPointer=An,Tn.prototype.deleteObject=function(n){null!==n&&n.delete()},Tn.prototype.fromWireType=function(n){function t(){return this.Z?ln(this.G.P,{I:this.ka,H:r,M:this,L:n}):ln(this.G.P,{I:this,H:n})}var r=this.ja(n);if(!r)return this.ca(n),null;var e=sn(this.G,r);if(void 0!==e)return 0===e.F.count.value?(e.F.H=r,e.F.L=n,e.clone()):(e=e.clone(),this.ca(n),e);if(e=this.G.ia(r),!(e=on[e]))return t.call(this);e=this.Y?e.ga:e.pointerType;var i=en(r,this.G,e.G);return null===i?t.call(this):this.Z?ln(e.G.P,{I:e,H:i,M:this,L:n}):ln(e.G.P,{I:e,H:i})},On=e.UnboundTypeError=Z("UnboundTypeError"),In.N.push({value:void 0},{value:null},{value:!0},{value:!1}),In.ba=In.N.length,e.count_emval_handles=function(){for(var n=0,t=In.ba;t<In.N.length;++t)void 0!==In.N[t]&&++n;return n};var Jn,Kn={q:function(){},t:function(n,t,r,e,i){var o=H(r);X(n,{name:t=B(t),fromWireType:function(n){return!!n},toWireType:function(n,t){return t?e:i},argPackAdvance:8,readValueFromPointer:function(n){if(1===r)var e=l;else if(2===r)e=h;else{if(4!==r)throw new TypeError("Unknown boolean type size: "+t);e=p}return this.fromWireType(e[n>>o])},O:null})},c:function(n,t,r,e,i,o,u,a,c,f,s,l,v){s=B(s),o=Cn(i,o),a&&(a=Cn(u,a)),f&&(f=Cn(c,f)),v=Cn(l,v);var h=D(s);pn(h,(function(){Wn("Cannot construct "+s+" due to unbound types",[e])})),Q([n,t,r],e?[e]:[],(function(t){if(t=t[0],e)var r=t.G,i=r.P;else i=hn.prototype;t=N(h,(function(){if(Object.getPrototypeOf(this)!==u)throw new $("Use 'new' to construct "+s);if(void 0===c.R)throw new $(s+" has no accessible constructor");var n=c.R[arguments.length];if(void 0===n)throw new $("Tried to invoke ctor of "+s+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(c.R).toString()+") parameters instead!");return n.apply(this,arguments)}));var u=Object.create(i,{constructor:{value:t}});t.prototype=u;var c=new yn(s,t,u,v,r,o,a,f);c.J&&(void 0===c.J.X&&(c.J.X=[]),c.J.X.push(c)),r=new Tn(s,c,!0,!1),i=new Tn(s+"*",c,!1,!1);var l=new Tn(s+" const*",c,!1,!0);return on[n]={pointerType:i,ga:l},kn(h,t),[r,i,l]}))},g:function(n,r,e,i,o,u,a){var c=Fn(e,i);r=B(r),u=Cn(o,u),Q([],[n],(function(n){function i(){Wn("Cannot call "+o+" due to unbound types",c)}var o=(n=n[0]).name+"."+r;r.startsWith("@@")&&(r=Symbol[r.substring(2)]);var f=n.G.constructor;return void 0===f[r]?(i.T=e-1,f[r]=i):(dn(f,r,o),f[r].K[e-1]=i),Q([],c,(function(i){if(i=Sn(o,[i[0],null].concat(i.slice(1)),null,u,a),void 0===f[r].K?(i.T=e-1,f[r]=i):f[r].K[e-1]=i,n.G.X)for(var c,s=t(n.G.X);!(c=s()).done;){var l=c.value;l.constructor.hasOwnProperty(r)||(l.constructor[r]=i)}return[]})),[]}))},h:function(n,t,r,e,i,o,u,a){t=B(t),o=Cn(i,o),Q([],[n],(function(n){var i=(n=n[0]).name+"."+t,c={get:function(){Wn("Cannot access "+i+" due to unbound types",[r])},enumerable:!0,configurable:!0};return c.set=a?function(){Wn("Cannot access "+i+" due to unbound types",[r])}:function(){G(i+" is a read-only property")},Object.defineProperty(n.G.constructor,t,c),Q([],[r],(function(r){r=r[0];var i={get:function(){return r.fromWireType(o(e))},enumerable:!0};return a&&(a=Cn(u,a),i.set=function(n){var t=[];a(e,r.toWireType(t,n)),Un(t)}),Object.defineProperty(n.G.constructor,t,i),[]})),[]}))},d:function(n,t,r,e,i,o){0<t||U();var u=Fn(t,r);i=Cn(e,i),Q([],[n],(function(n){var r="constructor "+(n=n[0]).name;if(void 0===n.G.R&&(n.G.R=[]),void 0!==n.G.R[t-1])throw new $("Cannot register multiple constructors with identical number of parameters ("+(t-1)+") for class '"+n.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!");return n.G.R[t-1]=function(){Wn("Cannot construct "+n.name+" due to unbound types",u)},Q([],u,(function(e){return e.splice(1,0,null),n.G.R[t-1]=Sn(r,e,null,i,o),[]})),[]}))},a:function(n,t,r,e,i,o,u,a){var c=Fn(r,e);t=B(t),o=Cn(i,o),Q([],[n],(function(n){function e(){Wn("Cannot call "+i+" due to unbound types",c)}var i=(n=n[0]).name+"."+t;t.startsWith("@@")&&(t=Symbol[t.substring(2)]),a&&n.G.la.push(t);var f=n.G.P,s=f[t];return void 0===s||void 0===s.K&&s.className!==n.name&&s.T===r-2?(e.T=r-2,e.className=n.name,f[t]=e):(dn(f,t,i),f[t].K[r-2]=e),Q([],c,(function(e){return e=Sn(i,e,n,o,u),void 0===f[t].K?(e.T=r-2,f[t]=e):f[t].K[r-2]=e,[]})),[]}))},b:function(n,t,r,e,i,o,u,a,c,f){t=B(t),i=Cn(e,i),Q([],[n],(function(n){var e=(n=n[0]).name+"."+t,s={get:function(){Wn("Cannot access "+e+" due to unbound types",[r,u])},enumerable:!0,configurable:!0};return s.set=c?function(){Wn("Cannot access "+e+" due to unbound types",[r,u])}:function(){G(e+" is a read-only property")},Object.defineProperty(n.G.P,t,s),Q([],c?[r,u]:[r],(function(r){var u=r[0],s={get:function(){var t=En(this,n,e+" getter");return u.fromWireType(i(o,t))},enumerable:!0};if(c){c=Cn(a,c);var l=r[1];s.set=function(t){var r=En(this,n,e+" setter"),i=[];c(f,r,l.toWireType(i,t)),Un(i)}}return Object.defineProperty(n.G.P,t,s),[]})),[]}))},s:function(n,t){X(n,{name:t=B(t),fromWireType:function(n){var t=Mn(n);return xn(n),t},toWireType:function(n,t){return _n(t)},argPackAdvance:8,readValueFromPointer:An,O:null})},o:function(n,t,r){r=H(r),X(n,{name:t=B(t),fromWireType:function(n){return n},toWireType:function(n,t){return t},argPackAdvance:8,readValueFromPointer:Hn(t,r),O:null})},f:function(n,t,r,e,i){t=B(t),-1===i&&(i=4294967295),i=H(r);var o=function(n){return n};if(0===e){var u=32-8*r;o=function(n){return n<<u>>>u}}r=t.includes("unsigned")?function(n,t){return t>>>0}:function(n,t){return t},X(n,{name:t,fromWireType:o,toWireType:r,argPackAdvance:8,readValueFromPointer:Vn(t,i,0!==e),O:null})},x:function(n,t){var r="std::string"===(t=B(t));X(n,{name:t,fromWireType:function(n){var t=y[n>>2],e=n+4;if(r)for(var i=e,o=0;o<=t;++o){var u=e+o;if(o==t||0==v[u]){if(i=i?Rn(i,u-i):"",void 0===a)var a=i;else a+=String.fromCharCode(0),a+=i;i=u+1}}else{for(a=Array(t),o=0;o<t;++o)a[o]=String.fromCharCode(v[e+o]);a=a.join("")}return Xn(n),a},toWireType:function(n,t){t instanceof ArrayBuffer&&(t=new Uint8Array(t));var e,i,o="string"==typeof t;if(o||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int8Array||G("Cannot pass non-string to std::string"),r&&o)for(e=i=0;e<t.length;++e){var u=t.charCodeAt(e);127>=u?i++:2047>=u?i+=2:55296<=u&&57343>=u?(i+=4,++e):i+=3}else i=t.length;if(u=(i=Qn(4+(e=i)+1))+4,y[i>>2]=e,r&&o){if(o=u,u=e+1,e=v,0<u){u=o+u-1;for(var a=0;a<t.length;++a){var c=t.charCodeAt(a);if(55296<=c&&57343>=c&&(c=65536+((1023&c)<<10)|1023&t.charCodeAt(++a)),127>=c){if(o>=u)break;e[o++]=c}else{if(2047>=c){if(o+1>=u)break;e[o++]=192|c>>6}else{if(65535>=c){if(o+2>=u)break;e[o++]=224|c>>12}else{if(o+3>=u)break;e[o++]=240|c>>18,e[o++]=128|c>>12&63}e[o++]=128|c>>6&63}e[o++]=128|63&c}}e[o]=0}}else if(o)for(o=0;o<e;++o)255<(a=t.charCodeAt(o))&&(Xn(u),G("String has UTF-16 code units that do not fit in 8 bits")),v[u+o]=a;else for(o=0;o<e;++o)v[u+o]=t[o];return null!==n&&n.push(Xn,i),i},argPackAdvance:8,readValueFromPointer:An,O:function(n){Xn(n)}})},u:function(n,t){X(n,{ra:!0,name:t=B(t),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},j:function(n,t,r){n=Mn(n),t=qn(t,"emval::as");var e=[],i=_n(e);return y[r>>2]=i,t.toWireType(e,n)},e:xn,k:function(n,t){return n=Mn(n),t=Mn(t),_n(n[t])},l:function(n){var t=Ln[n];return _n(void 0===t?B(n):t)},i:function(n){Un(Mn(n)),xn(n)},p:function(n,t){return n=(n=qn(n,"_emval_take_value")).readValueFromPointer(t),_n(n)},n:function(){U("")},m:function(n,t,r){var e;for(Dn.length=0,r>>=2;e=v[t++];)r+=105!=e&r,Dn.push(105==e?p[r]:b[r++>>1]),++r;return _[n].apply(null,Dn)},r:function(n){var t=v.length;if(2147483648<(n>>>=0))return!1;for(var r=1;4>=r;r*=2){var e=t*(1+.2/r);e=Math.min(e,n+100663296);var i=Math;e=Math.max(n,e);n:{i=i.min.call(i,2147483648,e+(65536-e%65536)%65536)-s.buffer.byteLength+65535>>>16;try{s.grow(i),g();var o=1;break n}catch(n){}o=void 0}if(o)return!0}return!1},w:Nn,v:Zn};function Qn(){return(Qn=e.asm.B).apply(null,arguments)}function Xn(){return(Xn=e.asm.C).apply(null,arguments)}function Yn(){return(Yn=e.asm.D).apply(null,arguments)}function nt(){function n(){if(!Jn&&(Jn=!0,e.calledRun=!0,!w)){if(z(k),i(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),e.postRun)for("function"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;){var n=e.postRun.shift();j.unshift(n)}z(j)}}if(!(0<P)){if(e.preRun)for("function"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)C();z(T),0<P||(e.setStatus?(e.setStatus("Running..."),setTimeout((function(){setTimeout((function(){e.setStatus("")}),1),n()}),1)):n())}}if(function(){function n(n){if(n=n.exports,e.asm=n,s=e.asm.y,g(),A=e.asm.A,k.unshift(e.asm.z),P--,e.monitorRunDependencies&&e.monitorRunDependencies(P),0==P&&W){var t=W;W=null,t()}return n}var t={a:Kn};if(P++,e.monitorRunDependencies&&e.monitorRunDependencies(P),e.instantiateWasm)try{return e.instantiateWasm(t,n)}catch(n){f("Module.instantiateWasm callback failed with error: "+n),o(n)}M(t,(function(t){n(t.instance)})).catch(o)}(),e.__embind_initialize_bindings=function(){return(e.__embind_initialize_bindings=e.asm.E).apply(null,arguments)},W=function n(){Jn||nt(),Jn||(W=n)},e.preInit)for("function"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();return nt(),n.ready}))}}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
